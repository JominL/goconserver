// Code generated by protoc-gen-go. DO NOT EDIT.
// source: manager.proto

/*
Package consolepb is a generated protocol buffer package.

It is generated from these files:
	manager.proto

It has these top-level messages:
	NodeName
	Node
	NodesState
	Result
	ReplayContent
*/
package consolepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NodeName struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *NodeName) Reset()                    { *m = NodeName{} }
func (m *NodeName) String() string            { return proto.CompactTextString(m) }
func (*NodeName) ProtoMessage()               {}
func (*NodeName) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NodeName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Node struct {
	Name     string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Driver   string            `protobuf:"bytes,2,opt,name=driver" json:"driver,omitempty"`
	Params   map[string]string `protobuf:"bytes,3,rep,name=params" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Ondemand bool              `protobuf:"varint,4,opt,name=ondemand" json:"ondemand,omitempty"`
	Status   int32             `protobuf:"varint,5,opt,name=status" json:"status,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Node) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *Node) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *Node) GetOndemand() bool {
	if m != nil {
		return m.Ondemand
	}
	return false
}

func (m *Node) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type NodesState struct {
	Names []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
	State string   `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
}

func (m *NodesState) Reset()                    { *m = NodesState{} }
func (m *NodesState) String() string            { return proto.CompactTextString(m) }
func (*NodesState) ProtoMessage()               {}
func (*NodesState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NodesState) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *NodesState) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type Result struct {
	Result map[string]string `protobuf:"bytes,1,rep,name=result" json:"result,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Result) GetResult() map[string]string {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReplayContent struct {
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (m *ReplayContent) Reset()                    { *m = ReplayContent{} }
func (m *ReplayContent) String() string            { return proto.CompactTextString(m) }
func (*ReplayContent) ProtoMessage()               {}
func (*ReplayContent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReplayContent) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func init() {
	proto.RegisterType((*NodeName)(nil), "consolepb.NodeName")
	proto.RegisterType((*Node)(nil), "consolepb.Node")
	proto.RegisterType((*NodesState)(nil), "consolepb.NodesState")
	proto.RegisterType((*Result)(nil), "consolepb.Result")
	proto.RegisterType((*ReplayContent)(nil), "consolepb.ReplayContent")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ConsoleManager service

type ConsoleManagerClient interface {
	ShowNode(ctx context.Context, in *NodeName, opts ...grpc.CallOption) (*Node, error)
	SetConsoleState(ctx context.Context, in *NodesState, opts ...grpc.CallOption) (*Result, error)
	GetReplayContent(ctx context.Context, in *NodeName, opts ...grpc.CallOption) (*ReplayContent, error)
}

type consoleManagerClient struct {
	cc *grpc.ClientConn
}

func NewConsoleManagerClient(cc *grpc.ClientConn) ConsoleManagerClient {
	return &consoleManagerClient{cc}
}

func (c *consoleManagerClient) ShowNode(ctx context.Context, in *NodeName, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/consolepb.ConsoleManager/ShowNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleManagerClient) SetConsoleState(ctx context.Context, in *NodesState, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/consolepb.ConsoleManager/SetConsoleState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleManagerClient) GetReplayContent(ctx context.Context, in *NodeName, opts ...grpc.CallOption) (*ReplayContent, error) {
	out := new(ReplayContent)
	err := grpc.Invoke(ctx, "/consolepb.ConsoleManager/GetReplayContent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConsoleManager service

type ConsoleManagerServer interface {
	ShowNode(context.Context, *NodeName) (*Node, error)
	SetConsoleState(context.Context, *NodesState) (*Result, error)
	GetReplayContent(context.Context, *NodeName) (*ReplayContent, error)
}

func RegisterConsoleManagerServer(s *grpc.Server, srv ConsoleManagerServer) {
	s.RegisterService(&_ConsoleManager_serviceDesc, srv)
}

func _ConsoleManager_ShowNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleManagerServer).ShowNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consolepb.ConsoleManager/ShowNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleManagerServer).ShowNode(ctx, req.(*NodeName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleManager_SetConsoleState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodesState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleManagerServer).SetConsoleState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consolepb.ConsoleManager/SetConsoleState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleManagerServer).SetConsoleState(ctx, req.(*NodesState))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleManager_GetReplayContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleManagerServer).GetReplayContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consolepb.ConsoleManager/GetReplayContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleManagerServer).GetReplayContent(ctx, req.(*NodeName))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConsoleManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "consolepb.ConsoleManager",
	HandlerType: (*ConsoleManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowNode",
			Handler:    _ConsoleManager_ShowNode_Handler,
		},
		{
			MethodName: "SetConsoleState",
			Handler:    _ConsoleManager_SetConsoleState_Handler,
		},
		{
			MethodName: "GetReplayContent",
			Handler:    _ConsoleManager_GetReplayContent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager.proto",
}

func init() { proto.RegisterFile("manager.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x4d, 0x4e, 0xf3, 0x30,
	0x10, 0xad, 0x9b, 0x36, 0x5f, 0x3a, 0x55, 0xbf, 0x16, 0xf3, 0x23, 0x2b, 0x08, 0x14, 0x65, 0x15,
	0x36, 0x59, 0xa4, 0x42, 0x2a, 0x48, 0xac, 0x2a, 0xc4, 0x8a, 0x0a, 0xa5, 0x27, 0x70, 0x1b, 0x0b,
	0x10, 0x89, 0x1d, 0x25, 0x6e, 0x51, 0x39, 0x21, 0x27, 0xe0, 0x3c, 0xc8, 0x3f, 0x54, 0x69, 0xe9,
	0x86, 0x95, 0xe7, 0x8d, 0xdf, 0xcc, 0xbc, 0xe7, 0x31, 0x0c, 0x0a, 0xca, 0xe9, 0x33, 0xab, 0xe2,
	0xb2, 0x12, 0x52, 0xe0, 0xde, 0x52, 0xf0, 0x5a, 0xe4, 0xac, 0x5c, 0x84, 0x97, 0xe0, 0xcd, 0x44,
	0xc6, 0x66, 0xb4, 0x60, 0x18, 0x43, 0x87, 0xd3, 0x82, 0x11, 0x14, 0xa0, 0xa8, 0x97, 0xea, 0x38,
	0xfc, 0x42, 0xd0, 0x51, 0x84, 0x43, 0x97, 0xf8, 0x0c, 0xdc, 0xac, 0x7a, 0x5d, 0xb3, 0x8a, 0xb4,
	0x75, 0xd6, 0x22, 0x3c, 0x06, 0xb7, 0xa4, 0x15, 0x2d, 0x6a, 0xe2, 0x04, 0x4e, 0xd4, 0x4f, 0xce,
	0xe3, 0xed, 0xc0, 0x58, 0x35, 0x8b, 0x9f, 0xf4, 0xed, 0x3d, 0x97, 0xd5, 0x26, 0xb5, 0x54, 0xec,
	0x83, 0x27, 0x78, 0xc6, 0x0a, 0xca, 0x33, 0xd2, 0x09, 0x50, 0xe4, 0xa5, 0x5b, 0xac, 0x06, 0xd5,
	0x92, 0xca, 0x55, 0x4d, 0xba, 0x01, 0x8a, 0xba, 0xa9, 0x45, 0xfe, 0x0d, 0xf4, 0x1b, 0xad, 0xf0,
	0x08, 0x9c, 0x37, 0xb6, 0xb1, 0x12, 0x55, 0x88, 0x4f, 0xa0, 0xbb, 0xa6, 0xf9, 0x8a, 0x59, 0x81,
	0x06, 0xdc, 0xb6, 0x27, 0x28, 0x9c, 0x00, 0x28, 0x29, 0xf5, 0x5c, 0x52, 0xc9, 0x14, 0x4f, 0x39,
	0xaa, 0x09, 0x0a, 0x1c, 0xc5, 0xd3, 0x40, 0x65, 0xd5, 0xa0, 0x6d, 0xb5, 0x06, 0xe1, 0x07, 0xb8,
	0x29, 0xab, 0x57, 0xb9, 0xc4, 0xd7, 0xe0, 0x56, 0x3a, 0xd2, 0x65, 0xfd, 0xe4, 0xa2, 0xe1, 0xd3,
	0x50, 0xec, 0x61, 0x9d, 0x1a, 0xb2, 0x52, 0xdd, 0x48, 0xff, 0x49, 0xf5, 0x15, 0x0c, 0x52, 0x56,
	0xe6, 0x74, 0x33, 0x15, 0x5c, 0x32, 0x2e, 0x31, 0x81, 0x7f, 0x4b, 0x13, 0xda, 0x06, 0x3f, 0x30,
	0xf9, 0x44, 0xf0, 0x7f, 0x6a, 0xe4, 0x3c, 0x9a, 0xed, 0xe3, 0x04, 0xbc, 0xf9, 0x8b, 0x78, 0xd7,
	0xfb, 0x3c, 0xde, 0xdb, 0x89, 0xfa, 0x01, 0xfe, 0x70, 0x2f, 0x19, 0xb6, 0xf0, 0x1d, 0x0c, 0xe7,
	0x4c, 0xda, 0x46, 0xe6, 0xb1, 0x4e, 0xf7, 0x58, 0xe6, 0x0d, 0xfd, 0xa3, 0x5f, 0xee, 0xc3, 0x16,
	0x9e, 0xc2, 0xe8, 0x81, 0xc9, 0x5d, 0xcd, 0x07, 0x47, 0x93, 0x9d, 0xea, 0x06, 0x3d, 0x6c, 0x2d,
	0x5c, 0xfd, 0x6d, 0xc7, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x30, 0xd3, 0x45, 0x0b, 0xc7, 0x02,
	0x00, 0x00,
}
